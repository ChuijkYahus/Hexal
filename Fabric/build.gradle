plugins {
    id 'fabric-loom' version "$loomVersion"
    id 'hexal.platform'
}

archivesBaseName = getArtifactID("fabric")

loom {
    mixin.defaultRefmapName = "hexal.mixins.refmap.json"

    accessWidenerPath = file("src/main/resources/hexal.accesswidener")

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            runDir "Fabric/run"
        }
        server {
            server()
            setConfigName("Fabric Server")
            runDir "Fabric/runServer"
        }
        datagen {
            client()
            runDir "Fabric/run"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.modid=${modID}"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
        }

        configureEach {
            ideConfigGenerated(true)
        }
    }
}

repositories {
    mavenCentral()
    maven { url "https://maven.shedaniel.me/" }
    maven {
        url 'https://maven.ladysnake.org/releases'
    }
    maven {
        name "entity reach"
        url "https://maven.jamieswhiteshirt.com/libs-release/"
    }
    maven { url "https://mvn.devos.one/snapshots/" }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        url 'https://repo.sleeping.town'
        content {
            includeGroup 'com.unascribed'
        }
    }

    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings loom.officialMojangMappings()
    modImplementation("net.fabricmc:fabric-language-kotlin:1.7.4+kotlin.1.6.21")
    modImplementation "net.fabricmc:fabric-loader:${fabricLoaderVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricVersion}"

    // Reqs
    compileOnly "com.demonwav.mcdev:annotations:1.0"

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    compileOnly project(":Common")

    modImplementation "at.petra-k.paucal:paucal-fabric-$minecraftVersion:$paucalVersion"
    modImplementation("at.petra-k.hexcasting:hexcasting-fabric-$minecraftVersion:$hexcastingVersion") {
        exclude module: "phosphor"
    }
    modImplementation "vazkii.patchouli:Patchouli:$minecraftVersion-$patchouliVersion-FABRIC"

    modImplementation "me.zeroeightsix:fiber:$fiberVersion"
    include "me.zeroeightsix:fiber:$fiberVersion"

    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-api:$cardinalComponentsVersion"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-api:$cardinalComponentsVersion"

    modImplementation "com.jamieswhiteshirt:reach-entity-attributes:2.1.1"
    include "com.jamieswhiteshirt:reach-entity-attributes:2.1.1"

    modImplementation "io.github.tropheusj:serialization-hooks:$serializationHooksVersion"
    include "io.github.tropheusj:serialization-hooks:$serializationHooksVersion"

    modImplementation "software.bernie.geckolib:geckolib-fabric-1.19:$geckolibVersion"

    // Optional integrations

    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:$reiVersion"

    modApi("me.shedaniel.cloth:cloth-config-fabric:$clothConfigVersion") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation "dev.emi:emi:${emiVersion}"

    modImplementation "maven.modrinth:gravity-api:$gravityApiVersion"
    modApi("com.github.Virtuoel:Pehkui:${pehkuiVersion}", {
        exclude group: "net.fabricmc.fabric-api"
    })

    modApi include("com.unascribed:lib39-core:$lib39Version+$minecraftVersion")
    modApi include("com.unascribed:lib39-phantom:$lib39Version+$minecraftVersion")

    modImplementation("com.terraformersmc:modmenu:$modmenuVersion")

    implementation 'org.jetbrains:annotations:23.0.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}
compileKotlin {
    source(project(":Common").sourceSets.main.kotlin)
}

sourcesJar {
    from project(":Common").sourceSets.main.allJava
}

sourceSets {
    main.resources.srcDirs += ['src/generated/resources', '../Common/src/generated/resources']
}

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.register("ciArtifacts", Copy) {
    from remapJar
    into rootProject.file("build/ciArtifacts")
}

build {
    dependsOn ciArtifacts
}

hexalModDependencies {
    requires("fabric-api")
    requires("fabric-language-kotlin")
    requires("cardinal-components-api")
    requires("patchouli")
    requires("cloth-config")
    requires("paucal")
    requires(curseforge: "hexcasting", modrinth: "hex-casting")
    requires("geckolib")

    optional("modmenu")
    optional("pehkui")
}

publishMods {
    file = remapJar.archiveFile
}

setupJar(this)
